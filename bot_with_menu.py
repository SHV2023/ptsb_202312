#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram-–±–æ—Ç —Å –º–µ–Ω—é –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å API –¥–ª—è —Ñ–æ—Ç–æ –∏ —Ñ–∞–∫—Ç–æ–≤ –æ –∂–∏–≤–æ—Ç–Ω—ã—Ö
"""

import logging
import os
import random
import aiohttp
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ –µ–≥–æ —É @BotFather –≤ Telegram)
BOT_TOKEN = os.getenv('BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')

# API endpoints
CAT_PHOTO_API = "https://api.thecatapi.com/v1/images/search"
CAT_FACT_API = "https://catfact.ninja/fact"
FOX_PHOTO_API = "https://randomfox.ca/floof/"
DOG_FACT_API = "https://dogapi.dog/api/v2/facts"


def get_main_menu_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    keyboard = [
        [
            InlineKeyboardButton("üê± –§–æ—Ç–æ –∫–æ—Ç–∞", callback_data='cat_photo'),
            InlineKeyboardButton("üê± –§–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö", callback_data='cat_fact')
        ],
        [
            InlineKeyboardButton("üê∂ –§–∞–∫—Ç –æ —Å–æ–±–∞–∫–∞—Ö", callback_data='dog_fact'),
            InlineKeyboardButton("ü¶ä –§–æ—Ç–æ –ª–∏—Å—ã", callback_data='fox_photo')
        ],
        [
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", callback_data='menu')
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_message = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏! ü§ñ\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ —Ñ–æ—Ç–æ –∂–∏–≤–æ—Ç–Ω—ã—Ö –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã! üêæ\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "/test - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞\n\n"
        "–¢–∞–∫–∂–µ —è –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º '–ü—Ä–∏–≤–µ—Ç'! üòä"
    )
    
    await update.message.reply_text(
        welcome_message,
        reply_markup=get_main_menu_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    menu_text = (
        "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(
        menu_text,
        reply_markup=get_main_menu_keyboard()
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/menu - –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "/test - —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞\n\n"
        "üéØ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞:\n"
        "‚Ä¢ üê± –°–ª—É—á–∞–π–Ω—ã–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ–≤\n"
        "‚Ä¢ üê± –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –∫–æ—à–∫–∞—Ö\n"
        "‚Ä¢ üê∂ –§–∞–∫—Ç—ã –æ —Å–æ–±–∞–∫–∞—Ö\n"
        "‚Ä¢ ü¶ä –§–æ—Ç–æ –ª–∏—Å–∏—Ü\n\n"
        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—é –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–æ–º '–ü—Ä–∏–≤–µ—Ç'\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é —Ä–µ–∞–ª—å–Ω—ã–µ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ –†–∞–±–æ—Ç–∞—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å! üéâ"
    )
    
    await update.message.reply_text(help_text)


async def test_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    user = update.effective_user
    test_message = (
        f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
        f"üÜî ID: {user.id}\n"
        f"üìù Username: @{user.username if user.username else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n\n"
        "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:"
    )
    
    keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(test_message, reply_markup=reply_markup)
    logger.info(f"–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.first_name} ({user.id})")


async def fetch_cat_photo() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CAT_PHOTO_API) as response:
                if response.status == 200:
                    data = await response.json()
                    return data[0]['url']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∞: {e}")
    return None


async def fetch_cat_fact() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(CAT_FACT_API) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['fact']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞ –æ –∫–æ—à–∫–∞—Ö: {e}")
    return None


async def fetch_fox_photo() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Ñ–æ—Ç–æ –ª–∏—Å—ã"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(FOX_PHOTO_API) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['image']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –ª–∏—Å—ã: {e}")
    return None


async def fetch_dog_fact() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–æ–±–∞–∫–∞—Ö"""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(DOG_FACT_API) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['data'][0]['attributes']['body']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–∞ –æ —Å–æ–±–∞–∫–∞—Ö: {e}")
    return None


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} ({user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")
    
    if query.data == 'menu':
        menu_text = (
            "üéØ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await query.edit_message_text(
            menu_text,
            reply_markup=get_main_menu_keyboard()
        )
    
    elif query.data == 'cat_photo':
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –∫–æ—Ç–∞...")
        photo_url = await fetch_cat_photo()
        
        if photo_url:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=photo_url,
                caption="üê± –í–æ—Ç –º–∏–ª—ã–π –∫–æ—Ç–∏–∫ –¥–ª—è —Ç–µ–±—è!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif query.data == 'cat_fact':
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö...")
        fact = await fetch_cat_fact()
        
        if fact:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üê± –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö:\n\n{fact}",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif query.data == 'fox_photo':
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –ª–∏—Å—ã...")
        photo_url = await fetch_fox_photo()
        
        if photo_url:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.message.reply_photo(
                photo=photo_url,
                caption="ü¶ä –í–æ—Ç –∫—Ä–∞—Å–∏–≤–∞—è –ª–∏—Å–∏—á–∫–∞ –¥–ª—è —Ç–µ–±—è!",
                reply_markup=reply_markup
            )
            await query.message.delete()
        else:
            await query.edit_message_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                reply_markup=get_main_menu_keyboard()
            )
    
    elif query.data == 'dog_fact':
        await query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–∫—Ç –æ —Å–æ–±–∞–∫–∞—Ö...")
        fact = await fetch_dog_fact()
        
        if fact:
            keyboard = [[InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üê∂ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç –æ —Å–æ–±–∞–∫–∞—Ö:\n\n{fact}",
                reply_markup=reply_markup
            )
        else:
            await query.edit_message_text(
                "üòî –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!",
                reply_markup=get_main_menu_keyboard()
            )


async def handle_hello_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–ª–æ–≤–æ–º '–ü—Ä–∏–≤–µ—Ç'"""
    user = update.effective_user
    message_text = update.message.text.lower()
    
    if '–ø—Ä–∏–≤–µ—Ç' in message_text:
        responses = [
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã",
            f"–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç, {user.first_name}! üòä",
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, {user.first_name}! –ö–∞–∫ –¥–µ–ª–∞?",
            f"–ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç, {user.first_name}! üéâ",
        ]
        
        response = random.choice(responses)
        keyboard = [[InlineKeyboardButton("üéØ –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data='menu')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(response, reply_markup=reply_markup)
        logger.info(f"–û—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç {user.first_name} ({user.id})")


async def handle_other_messages(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user = update.effective_user
    message_text = update.message.text
    
    if '–ø—Ä–∏–≤–µ—Ç' not in message_text.lower():
        response = (
            f"–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, {user.first_name}! üìù\n\n"
            "–Ø —É–º–µ—é –º–Ω–æ–≥–æ–µ! –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n"
            "‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ –∫–æ—Ç–æ–≤ –∏ –ª–∏—Å–∏—Ü üê±ü¶ä\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —Ñ–∞–∫—Ç—ã –æ –∫–æ—à–∫–∞—Ö –∏ —Å–æ–±–∞–∫–∞—Ö üê∂\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã /start, /menu, /help, /test\n"
            "‚Ä¢ –ó–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è, –∫–æ–≥–¥–∞ –≤—ã –ø–∏—à–µ—Ç–µ '–ü—Ä–∏–≤–µ—Ç'\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏! üòä"
        )
        
        await update.message.reply_text(
            response,
            reply_markup=get_main_menu_keyboard()
        )
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} ({user.id}): {message_text}")


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")
    
    if isinstance(update, Update) and update.effective_message:
        await update.effective_message.reply_text(
            "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == 'YOUR_BOT_TOKEN_HERE':
        print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        print("–ò–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_TOKEN_HERE –≤ –∫–æ–¥–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("menu", menu_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("test", test_command))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'(?i).*–ø—Ä–∏–≤–µ—Ç.*'), 
        handle_hello_messages
    ))
    
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND, 
        handle_other_messages
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ —Å –º–µ–Ω—é –∏ API...")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
